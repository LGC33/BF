<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BF Home on The Bugs Framework</title>
    <link>https://usnistgov.github.io/BF/Home/</link>
    <description>Recent content in BF Home on The Bugs Framework</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://usnistgov.github.io/BF/Home/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://usnistgov.github.io/BF/Home/Overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Overview/</guid>
      <description>Welcome to the NIST Bugs Framework (BF) Project!#We are classifying software bugs and weaknesses to allow precise descriptions of vulnerabilities that exploit them.
The Bugs Framework (BF) is a …
➢ Structured
➢ Complete
➢ Orthogonal
… classification system of software bugs and weaknesses, which is also independent from technology and programming languages specifics.
Structured means a weakness is described via one cause, one operation, one consequence, and one value per attribute from the lists defining a BF class.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>https://usnistgov.github.io/BF/Home/Concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Concepts/</guid>
      <description>#Software Security Concepts
We can observe that a security vulnerability leads to a security failure. However, what are the building blocks of a vulnerability? What is the defect in software that triggers a vulnerability? How does it propagate through errors until a final, exploitable error is reached? How do the underlying weaknesses of a vulnerability relate to these propagating errors?
We have developed the following definitions iteratively, while creating the BF software security vulnerability model.</description>
    </item>
    
    <item>
      <title>Why BF?</title>
      <link>https://usnistgov.github.io/BF/Home/Why-BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Why-BF/</guid>
      <description>Why BF?#The Bugs Framework aims to have the expressiveness power to clearly describe any software bug or weakness, underlying any vulnerability. It builds on the following commonly used repositories of software weaknesses and vulnerabilities, while considering the problems that they have.
Common Weakness Enumeration (CWE) – a community-developed list of software and hardware weaknesses types. Common Vulnerabilities and Exposures (CVE) – a catalog of publicly disclosed cybersecurity vulnerabilities.</description>
    </item>
    
    <item>
      <title> Approach</title>
      <link>https://usnistgov.github.io/BF/Home/Approach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Approach/</guid>
      <description>BF Approach#BF’s approach is different from CWE’s exhaustive list approach. BF is a classification. Each BF class is a taxonomic category of a weakness type. It relates to a distinct phase of software execution, the operations specific for that phase and the operands required as input to those operations.
BF describes a bug or a weakness as an improper state and its transition. The transition is to another weakness or to a failure.</description>
    </item>
    
    <item>
      <title>Methodology</title>
      <link>https://usnistgov.github.io/BF/Home/Methodology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Methodology/</guid>
      <description>BF Methodology#The methodology for developing a BF class is as follows (see Fig. 1): First, we identify the software execution phase, where a specific kind of bugs could occur. Then, we identify the operations for that phase. On step 3, we define a BF model showing operations flow. Then, we identify all causes. The initial causes are always improper operations. The intermediate causes are improper operands. On steps 5 and 6, we identify all consequences that propagate as causes to other weaknesses and all the final errors.</description>
    </item>
    
    <item>
      <title>Impact</title>
      <link>https://usnistgov.github.io/BF/Home/Impact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/Impact/</guid>
      <description>BF Impact#BF will allow precise communication about software bugs and weaknesses and will help identify exploit mitigation techniques.
➢ Government could improve the descriptions in public vulnerability repositories and create policies and guidelines for software testing.
➢ Software companies could improve the testing tools and their bug reports and implement automatic bugs finding and fixing.
➢ Professors could teach better about bugs and weaknesses and conduct research on formalizing software bugs.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://usnistgov.github.io/BF/Home/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://usnistgov.github.io/BF/Home/hidden/</guid>
      <description>This page is hidden in menu#Quondam non pater est dignior ille Eurotas#Latent te facies#Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona#O fallor in sustinui iussorum equidem.</description>
    </item>
    
  </channel>
</rss>
